// Code generated by ent, DO NOT EDIT.

package receiveaddress

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the receiveaddress type in the database.
	Label = "receive_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIsDeployed holds the string denoting the is_deployed field in the database.
	FieldIsDeployed = "is_deployed"
	// FieldDeploymentBlock holds the string denoting the deployment_block field in the database.
	FieldDeploymentBlock = "deployment_block"
	// FieldDeploymentTxHash holds the string denoting the deployment_tx_hash field in the database.
	FieldDeploymentTxHash = "deployment_tx_hash"
	// FieldDeployedAt holds the string denoting the deployed_at field in the database.
	FieldDeployedAt = "deployed_at"
	// FieldNetworkIdentifier holds the string denoting the network_identifier field in the database.
	FieldNetworkIdentifier = "network_identifier"
	// FieldChainID holds the string denoting the chain_id field in the database.
	FieldChainID = "chain_id"
	// FieldAssignedAt holds the string denoting the assigned_at field in the database.
	FieldAssignedAt = "assigned_at"
	// FieldRecycledAt holds the string denoting the recycled_at field in the database.
	FieldRecycledAt = "recycled_at"
	// FieldTimesUsed holds the string denoting the times_used field in the database.
	FieldTimesUsed = "times_used"
	// FieldLastIndexedBlock holds the string denoting the last_indexed_block field in the database.
	FieldLastIndexedBlock = "last_indexed_block"
	// FieldLastUsed holds the string denoting the last_used field in the database.
	FieldLastUsed = "last_used"
	// FieldTxHash holds the string denoting the tx_hash field in the database.
	FieldTxHash = "tx_hash"
	// FieldValidUntil holds the string denoting the valid_until field in the database.
	FieldValidUntil = "valid_until"
	// EdgePaymentOrder holds the string denoting the payment_order edge name in mutations.
	EdgePaymentOrder = "payment_order"
	// Table holds the table name of the receiveaddress in the database.
	Table = "receive_addresses"
	// PaymentOrderTable is the table that holds the payment_order relation/edge.
	PaymentOrderTable = "receive_addresses"
	// PaymentOrderInverseTable is the table name for the PaymentOrder entity.
	// It exists in this package in order to avoid circular dependency with the "paymentorder" package.
	PaymentOrderInverseTable = "payment_orders"
	// PaymentOrderColumn is the table column denoting the payment_order relation/edge.
	PaymentOrderColumn = "payment_order_receive_address"
)

// Columns holds all SQL columns for receiveaddress fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAddress,
	FieldSalt,
	FieldStatus,
	FieldIsDeployed,
	FieldDeploymentBlock,
	FieldDeploymentTxHash,
	FieldDeployedAt,
	FieldNetworkIdentifier,
	FieldChainID,
	FieldAssignedAt,
	FieldRecycledAt,
	FieldTimesUsed,
	FieldLastIndexedBlock,
	FieldLastUsed,
	FieldTxHash,
	FieldValidUntil,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "receive_addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"payment_order_receive_address",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsDeployed holds the default value on creation for the "is_deployed" field.
	DefaultIsDeployed bool
	// DeploymentTxHashValidator is a validator for the "deployment_tx_hash" field. It is called by the builders before save.
	DeploymentTxHashValidator func(string) error
	// DefaultTimesUsed holds the default value on creation for the "times_used" field.
	DefaultTimesUsed int
	// TxHashValidator is a validator for the "tx_hash" field. It is called by the builders before save.
	TxHashValidator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusUnused is the default value of the Status enum.
const DefaultStatus = StatusUnused

// Status values.
const (
	StatusPoolReady      Status = "pool_ready"
	StatusPoolAssigned   Status = "pool_assigned"
	StatusPoolProcessing Status = "pool_processing"
	StatusPoolCompleted  Status = "pool_completed"
	StatusUnused         Status = "unused"
	StatusUsed           Status = "used"
	StatusExpired        Status = "expired"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPoolReady, StatusPoolAssigned, StatusPoolProcessing, StatusPoolCompleted, StatusUnused, StatusUsed, StatusExpired:
		return nil
	default:
		return fmt.Errorf("receiveaddress: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ReceiveAddress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIsDeployed orders the results by the is_deployed field.
func ByIsDeployed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeployed, opts...).ToFunc()
}

// ByDeploymentBlock orders the results by the deployment_block field.
func ByDeploymentBlock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentBlock, opts...).ToFunc()
}

// ByDeploymentTxHash orders the results by the deployment_tx_hash field.
func ByDeploymentTxHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentTxHash, opts...).ToFunc()
}

// ByDeployedAt orders the results by the deployed_at field.
func ByDeployedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeployedAt, opts...).ToFunc()
}

// ByNetworkIdentifier orders the results by the network_identifier field.
func ByNetworkIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetworkIdentifier, opts...).ToFunc()
}

// ByChainID orders the results by the chain_id field.
func ByChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChainID, opts...).ToFunc()
}

// ByAssignedAt orders the results by the assigned_at field.
func ByAssignedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignedAt, opts...).ToFunc()
}

// ByRecycledAt orders the results by the recycled_at field.
func ByRecycledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecycledAt, opts...).ToFunc()
}

// ByTimesUsed orders the results by the times_used field.
func ByTimesUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimesUsed, opts...).ToFunc()
}

// ByLastIndexedBlock orders the results by the last_indexed_block field.
func ByLastIndexedBlock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastIndexedBlock, opts...).ToFunc()
}

// ByLastUsed orders the results by the last_used field.
func ByLastUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsed, opts...).ToFunc()
}

// ByTxHash orders the results by the tx_hash field.
func ByTxHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxHash, opts...).ToFunc()
}

// ByValidUntil orders the results by the valid_until field.
func ByValidUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidUntil, opts...).ToFunc()
}

// ByPaymentOrderField orders the results by payment_order field.
func ByPaymentOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newPaymentOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentOrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PaymentOrderTable, PaymentOrderColumn),
	)
}
