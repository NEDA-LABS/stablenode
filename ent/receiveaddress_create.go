// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NEDA-LABS/stablenode/ent/paymentorder"
	"github.com/NEDA-LABS/stablenode/ent/receiveaddress"
	"github.com/google/uuid"
)

// ReceiveAddressCreate is the builder for creating a ReceiveAddress entity.
type ReceiveAddressCreate struct {
	config
	mutation *ReceiveAddressMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rac *ReceiveAddressCreate) SetCreatedAt(t time.Time) *ReceiveAddressCreate {
	rac.mutation.SetCreatedAt(t)
	return rac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableCreatedAt(t *time.Time) *ReceiveAddressCreate {
	if t != nil {
		rac.SetCreatedAt(*t)
	}
	return rac
}

// SetUpdatedAt sets the "updated_at" field.
func (rac *ReceiveAddressCreate) SetUpdatedAt(t time.Time) *ReceiveAddressCreate {
	rac.mutation.SetUpdatedAt(t)
	return rac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableUpdatedAt(t *time.Time) *ReceiveAddressCreate {
	if t != nil {
		rac.SetUpdatedAt(*t)
	}
	return rac
}

// SetAddress sets the "address" field.
func (rac *ReceiveAddressCreate) SetAddress(s string) *ReceiveAddressCreate {
	rac.mutation.SetAddress(s)
	return rac
}

// SetSalt sets the "salt" field.
func (rac *ReceiveAddressCreate) SetSalt(b []byte) *ReceiveAddressCreate {
	rac.mutation.SetSalt(b)
	return rac
}

// SetStatus sets the "status" field.
func (rac *ReceiveAddressCreate) SetStatus(r receiveaddress.Status) *ReceiveAddressCreate {
	rac.mutation.SetStatus(r)
	return rac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableStatus(r *receiveaddress.Status) *ReceiveAddressCreate {
	if r != nil {
		rac.SetStatus(*r)
	}
	return rac
}

// SetIsDeployed sets the "is_deployed" field.
func (rac *ReceiveAddressCreate) SetIsDeployed(b bool) *ReceiveAddressCreate {
	rac.mutation.SetIsDeployed(b)
	return rac
}

// SetNillableIsDeployed sets the "is_deployed" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableIsDeployed(b *bool) *ReceiveAddressCreate {
	if b != nil {
		rac.SetIsDeployed(*b)
	}
	return rac
}

// SetDeploymentBlock sets the "deployment_block" field.
func (rac *ReceiveAddressCreate) SetDeploymentBlock(i int64) *ReceiveAddressCreate {
	rac.mutation.SetDeploymentBlock(i)
	return rac
}

// SetNillableDeploymentBlock sets the "deployment_block" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableDeploymentBlock(i *int64) *ReceiveAddressCreate {
	if i != nil {
		rac.SetDeploymentBlock(*i)
	}
	return rac
}

// SetDeploymentTxHash sets the "deployment_tx_hash" field.
func (rac *ReceiveAddressCreate) SetDeploymentTxHash(s string) *ReceiveAddressCreate {
	rac.mutation.SetDeploymentTxHash(s)
	return rac
}

// SetNillableDeploymentTxHash sets the "deployment_tx_hash" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableDeploymentTxHash(s *string) *ReceiveAddressCreate {
	if s != nil {
		rac.SetDeploymentTxHash(*s)
	}
	return rac
}

// SetDeployedAt sets the "deployed_at" field.
func (rac *ReceiveAddressCreate) SetDeployedAt(t time.Time) *ReceiveAddressCreate {
	rac.mutation.SetDeployedAt(t)
	return rac
}

// SetNillableDeployedAt sets the "deployed_at" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableDeployedAt(t *time.Time) *ReceiveAddressCreate {
	if t != nil {
		rac.SetDeployedAt(*t)
	}
	return rac
}

// SetNetworkIdentifier sets the "network_identifier" field.
func (rac *ReceiveAddressCreate) SetNetworkIdentifier(s string) *ReceiveAddressCreate {
	rac.mutation.SetNetworkIdentifier(s)
	return rac
}

// SetNillableNetworkIdentifier sets the "network_identifier" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableNetworkIdentifier(s *string) *ReceiveAddressCreate {
	if s != nil {
		rac.SetNetworkIdentifier(*s)
	}
	return rac
}

// SetChainID sets the "chain_id" field.
func (rac *ReceiveAddressCreate) SetChainID(i int64) *ReceiveAddressCreate {
	rac.mutation.SetChainID(i)
	return rac
}

// SetNillableChainID sets the "chain_id" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableChainID(i *int64) *ReceiveAddressCreate {
	if i != nil {
		rac.SetChainID(*i)
	}
	return rac
}

// SetAssignedAt sets the "assigned_at" field.
func (rac *ReceiveAddressCreate) SetAssignedAt(t time.Time) *ReceiveAddressCreate {
	rac.mutation.SetAssignedAt(t)
	return rac
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableAssignedAt(t *time.Time) *ReceiveAddressCreate {
	if t != nil {
		rac.SetAssignedAt(*t)
	}
	return rac
}

// SetRecycledAt sets the "recycled_at" field.
func (rac *ReceiveAddressCreate) SetRecycledAt(t time.Time) *ReceiveAddressCreate {
	rac.mutation.SetRecycledAt(t)
	return rac
}

// SetNillableRecycledAt sets the "recycled_at" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableRecycledAt(t *time.Time) *ReceiveAddressCreate {
	if t != nil {
		rac.SetRecycledAt(*t)
	}
	return rac
}

// SetTimesUsed sets the "times_used" field.
func (rac *ReceiveAddressCreate) SetTimesUsed(i int) *ReceiveAddressCreate {
	rac.mutation.SetTimesUsed(i)
	return rac
}

// SetNillableTimesUsed sets the "times_used" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableTimesUsed(i *int) *ReceiveAddressCreate {
	if i != nil {
		rac.SetTimesUsed(*i)
	}
	return rac
}

// SetLastIndexedBlock sets the "last_indexed_block" field.
func (rac *ReceiveAddressCreate) SetLastIndexedBlock(i int64) *ReceiveAddressCreate {
	rac.mutation.SetLastIndexedBlock(i)
	return rac
}

// SetNillableLastIndexedBlock sets the "last_indexed_block" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableLastIndexedBlock(i *int64) *ReceiveAddressCreate {
	if i != nil {
		rac.SetLastIndexedBlock(*i)
	}
	return rac
}

// SetLastUsed sets the "last_used" field.
func (rac *ReceiveAddressCreate) SetLastUsed(t time.Time) *ReceiveAddressCreate {
	rac.mutation.SetLastUsed(t)
	return rac
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableLastUsed(t *time.Time) *ReceiveAddressCreate {
	if t != nil {
		rac.SetLastUsed(*t)
	}
	return rac
}

// SetTxHash sets the "tx_hash" field.
func (rac *ReceiveAddressCreate) SetTxHash(s string) *ReceiveAddressCreate {
	rac.mutation.SetTxHash(s)
	return rac
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableTxHash(s *string) *ReceiveAddressCreate {
	if s != nil {
		rac.SetTxHash(*s)
	}
	return rac
}

// SetValidUntil sets the "valid_until" field.
func (rac *ReceiveAddressCreate) SetValidUntil(t time.Time) *ReceiveAddressCreate {
	rac.mutation.SetValidUntil(t)
	return rac
}

// SetNillableValidUntil sets the "valid_until" field if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillableValidUntil(t *time.Time) *ReceiveAddressCreate {
	if t != nil {
		rac.SetValidUntil(*t)
	}
	return rac
}

// SetPaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by ID.
func (rac *ReceiveAddressCreate) SetPaymentOrderID(id uuid.UUID) *ReceiveAddressCreate {
	rac.mutation.SetPaymentOrderID(id)
	return rac
}

// SetNillablePaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by ID if the given value is not nil.
func (rac *ReceiveAddressCreate) SetNillablePaymentOrderID(id *uuid.UUID) *ReceiveAddressCreate {
	if id != nil {
		rac = rac.SetPaymentOrderID(*id)
	}
	return rac
}

// SetPaymentOrder sets the "payment_order" edge to the PaymentOrder entity.
func (rac *ReceiveAddressCreate) SetPaymentOrder(p *PaymentOrder) *ReceiveAddressCreate {
	return rac.SetPaymentOrderID(p.ID)
}

// Mutation returns the ReceiveAddressMutation object of the builder.
func (rac *ReceiveAddressCreate) Mutation() *ReceiveAddressMutation {
	return rac.mutation
}

// Save creates the ReceiveAddress in the database.
func (rac *ReceiveAddressCreate) Save(ctx context.Context) (*ReceiveAddress, error) {
	rac.defaults()
	return withHooks(ctx, rac.sqlSave, rac.mutation, rac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rac *ReceiveAddressCreate) SaveX(ctx context.Context) *ReceiveAddress {
	v, err := rac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rac *ReceiveAddressCreate) Exec(ctx context.Context) error {
	_, err := rac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rac *ReceiveAddressCreate) ExecX(ctx context.Context) {
	if err := rac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rac *ReceiveAddressCreate) defaults() {
	if _, ok := rac.mutation.CreatedAt(); !ok {
		v := receiveaddress.DefaultCreatedAt()
		rac.mutation.SetCreatedAt(v)
	}
	if _, ok := rac.mutation.UpdatedAt(); !ok {
		v := receiveaddress.DefaultUpdatedAt()
		rac.mutation.SetUpdatedAt(v)
	}
	if _, ok := rac.mutation.Status(); !ok {
		v := receiveaddress.DefaultStatus
		rac.mutation.SetStatus(v)
	}
	if _, ok := rac.mutation.IsDeployed(); !ok {
		v := receiveaddress.DefaultIsDeployed
		rac.mutation.SetIsDeployed(v)
	}
	if _, ok := rac.mutation.TimesUsed(); !ok {
		v := receiveaddress.DefaultTimesUsed
		rac.mutation.SetTimesUsed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rac *ReceiveAddressCreate) check() error {
	if _, ok := rac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ReceiveAddress.created_at"`)}
	}
	if _, ok := rac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ReceiveAddress.updated_at"`)}
	}
	if _, ok := rac.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "ReceiveAddress.address"`)}
	}
	if _, ok := rac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ReceiveAddress.status"`)}
	}
	if v, ok := rac.mutation.Status(); ok {
		if err := receiveaddress.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ReceiveAddress.status": %w`, err)}
		}
	}
	if _, ok := rac.mutation.IsDeployed(); !ok {
		return &ValidationError{Name: "is_deployed", err: errors.New(`ent: missing required field "ReceiveAddress.is_deployed"`)}
	}
	if v, ok := rac.mutation.DeploymentTxHash(); ok {
		if err := receiveaddress.DeploymentTxHashValidator(v); err != nil {
			return &ValidationError{Name: "deployment_tx_hash", err: fmt.Errorf(`ent: validator failed for field "ReceiveAddress.deployment_tx_hash": %w`, err)}
		}
	}
	if _, ok := rac.mutation.TimesUsed(); !ok {
		return &ValidationError{Name: "times_used", err: errors.New(`ent: missing required field "ReceiveAddress.times_used"`)}
	}
	if v, ok := rac.mutation.TxHash(); ok {
		if err := receiveaddress.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf(`ent: validator failed for field "ReceiveAddress.tx_hash": %w`, err)}
		}
	}
	return nil
}

func (rac *ReceiveAddressCreate) sqlSave(ctx context.Context) (*ReceiveAddress, error) {
	if err := rac.check(); err != nil {
		return nil, err
	}
	_node, _spec := rac.createSpec()
	if err := sqlgraph.CreateNode(ctx, rac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rac.mutation.id = &_node.ID
	rac.mutation.done = true
	return _node, nil
}

func (rac *ReceiveAddressCreate) createSpec() (*ReceiveAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &ReceiveAddress{config: rac.config}
		_spec = sqlgraph.NewCreateSpec(receiveaddress.Table, sqlgraph.NewFieldSpec(receiveaddress.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rac.conflict
	if value, ok := rac.mutation.CreatedAt(); ok {
		_spec.SetField(receiveaddress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rac.mutation.UpdatedAt(); ok {
		_spec.SetField(receiveaddress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rac.mutation.Address(); ok {
		_spec.SetField(receiveaddress.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := rac.mutation.Salt(); ok {
		_spec.SetField(receiveaddress.FieldSalt, field.TypeBytes, value)
		_node.Salt = value
	}
	if value, ok := rac.mutation.Status(); ok {
		_spec.SetField(receiveaddress.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := rac.mutation.IsDeployed(); ok {
		_spec.SetField(receiveaddress.FieldIsDeployed, field.TypeBool, value)
		_node.IsDeployed = value
	}
	if value, ok := rac.mutation.DeploymentBlock(); ok {
		_spec.SetField(receiveaddress.FieldDeploymentBlock, field.TypeInt64, value)
		_node.DeploymentBlock = value
	}
	if value, ok := rac.mutation.DeploymentTxHash(); ok {
		_spec.SetField(receiveaddress.FieldDeploymentTxHash, field.TypeString, value)
		_node.DeploymentTxHash = value
	}
	if value, ok := rac.mutation.DeployedAt(); ok {
		_spec.SetField(receiveaddress.FieldDeployedAt, field.TypeTime, value)
		_node.DeployedAt = value
	}
	if value, ok := rac.mutation.NetworkIdentifier(); ok {
		_spec.SetField(receiveaddress.FieldNetworkIdentifier, field.TypeString, value)
		_node.NetworkIdentifier = value
	}
	if value, ok := rac.mutation.ChainID(); ok {
		_spec.SetField(receiveaddress.FieldChainID, field.TypeInt64, value)
		_node.ChainID = value
	}
	if value, ok := rac.mutation.AssignedAt(); ok {
		_spec.SetField(receiveaddress.FieldAssignedAt, field.TypeTime, value)
		_node.AssignedAt = value
	}
	if value, ok := rac.mutation.RecycledAt(); ok {
		_spec.SetField(receiveaddress.FieldRecycledAt, field.TypeTime, value)
		_node.RecycledAt = value
	}
	if value, ok := rac.mutation.TimesUsed(); ok {
		_spec.SetField(receiveaddress.FieldTimesUsed, field.TypeInt, value)
		_node.TimesUsed = value
	}
	if value, ok := rac.mutation.LastIndexedBlock(); ok {
		_spec.SetField(receiveaddress.FieldLastIndexedBlock, field.TypeInt64, value)
		_node.LastIndexedBlock = value
	}
	if value, ok := rac.mutation.LastUsed(); ok {
		_spec.SetField(receiveaddress.FieldLastUsed, field.TypeTime, value)
		_node.LastUsed = value
	}
	if value, ok := rac.mutation.TxHash(); ok {
		_spec.SetField(receiveaddress.FieldTxHash, field.TypeString, value)
		_node.TxHash = value
	}
	if value, ok := rac.mutation.ValidUntil(); ok {
		_spec.SetField(receiveaddress.FieldValidUntil, field.TypeTime, value)
		_node.ValidUntil = value
	}
	if nodes := rac.mutation.PaymentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   receiveaddress.PaymentOrderTable,
			Columns: []string{receiveaddress.PaymentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.payment_order_receive_address = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReceiveAddress.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReceiveAddressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rac *ReceiveAddressCreate) OnConflict(opts ...sql.ConflictOption) *ReceiveAddressUpsertOne {
	rac.conflict = opts
	return &ReceiveAddressUpsertOne{
		create: rac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReceiveAddress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rac *ReceiveAddressCreate) OnConflictColumns(columns ...string) *ReceiveAddressUpsertOne {
	rac.conflict = append(rac.conflict, sql.ConflictColumns(columns...))
	return &ReceiveAddressUpsertOne{
		create: rac,
	}
}

type (
	// ReceiveAddressUpsertOne is the builder for "upsert"-ing
	//  one ReceiveAddress node.
	ReceiveAddressUpsertOne struct {
		create *ReceiveAddressCreate
	}

	// ReceiveAddressUpsert is the "OnConflict" setter.
	ReceiveAddressUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ReceiveAddressUpsert) SetUpdatedAt(v time.Time) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateUpdatedAt() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldUpdatedAt)
	return u
}

// SetAddress sets the "address" field.
func (u *ReceiveAddressUpsert) SetAddress(v string) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateAddress() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldAddress)
	return u
}

// SetSalt sets the "salt" field.
func (u *ReceiveAddressUpsert) SetSalt(v []byte) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldSalt, v)
	return u
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateSalt() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldSalt)
	return u
}

// ClearSalt clears the value of the "salt" field.
func (u *ReceiveAddressUpsert) ClearSalt() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldSalt)
	return u
}

// SetStatus sets the "status" field.
func (u *ReceiveAddressUpsert) SetStatus(v receiveaddress.Status) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateStatus() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldStatus)
	return u
}

// SetIsDeployed sets the "is_deployed" field.
func (u *ReceiveAddressUpsert) SetIsDeployed(v bool) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldIsDeployed, v)
	return u
}

// UpdateIsDeployed sets the "is_deployed" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateIsDeployed() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldIsDeployed)
	return u
}

// SetDeploymentBlock sets the "deployment_block" field.
func (u *ReceiveAddressUpsert) SetDeploymentBlock(v int64) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldDeploymentBlock, v)
	return u
}

// UpdateDeploymentBlock sets the "deployment_block" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateDeploymentBlock() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldDeploymentBlock)
	return u
}

// AddDeploymentBlock adds v to the "deployment_block" field.
func (u *ReceiveAddressUpsert) AddDeploymentBlock(v int64) *ReceiveAddressUpsert {
	u.Add(receiveaddress.FieldDeploymentBlock, v)
	return u
}

// ClearDeploymentBlock clears the value of the "deployment_block" field.
func (u *ReceiveAddressUpsert) ClearDeploymentBlock() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldDeploymentBlock)
	return u
}

// SetDeploymentTxHash sets the "deployment_tx_hash" field.
func (u *ReceiveAddressUpsert) SetDeploymentTxHash(v string) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldDeploymentTxHash, v)
	return u
}

// UpdateDeploymentTxHash sets the "deployment_tx_hash" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateDeploymentTxHash() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldDeploymentTxHash)
	return u
}

// ClearDeploymentTxHash clears the value of the "deployment_tx_hash" field.
func (u *ReceiveAddressUpsert) ClearDeploymentTxHash() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldDeploymentTxHash)
	return u
}

// SetDeployedAt sets the "deployed_at" field.
func (u *ReceiveAddressUpsert) SetDeployedAt(v time.Time) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldDeployedAt, v)
	return u
}

// UpdateDeployedAt sets the "deployed_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateDeployedAt() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldDeployedAt)
	return u
}

// ClearDeployedAt clears the value of the "deployed_at" field.
func (u *ReceiveAddressUpsert) ClearDeployedAt() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldDeployedAt)
	return u
}

// SetNetworkIdentifier sets the "network_identifier" field.
func (u *ReceiveAddressUpsert) SetNetworkIdentifier(v string) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldNetworkIdentifier, v)
	return u
}

// UpdateNetworkIdentifier sets the "network_identifier" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateNetworkIdentifier() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldNetworkIdentifier)
	return u
}

// ClearNetworkIdentifier clears the value of the "network_identifier" field.
func (u *ReceiveAddressUpsert) ClearNetworkIdentifier() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldNetworkIdentifier)
	return u
}

// SetChainID sets the "chain_id" field.
func (u *ReceiveAddressUpsert) SetChainID(v int64) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldChainID, v)
	return u
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateChainID() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldChainID)
	return u
}

// AddChainID adds v to the "chain_id" field.
func (u *ReceiveAddressUpsert) AddChainID(v int64) *ReceiveAddressUpsert {
	u.Add(receiveaddress.FieldChainID, v)
	return u
}

// ClearChainID clears the value of the "chain_id" field.
func (u *ReceiveAddressUpsert) ClearChainID() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldChainID)
	return u
}

// SetAssignedAt sets the "assigned_at" field.
func (u *ReceiveAddressUpsert) SetAssignedAt(v time.Time) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldAssignedAt, v)
	return u
}

// UpdateAssignedAt sets the "assigned_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateAssignedAt() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldAssignedAt)
	return u
}

// ClearAssignedAt clears the value of the "assigned_at" field.
func (u *ReceiveAddressUpsert) ClearAssignedAt() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldAssignedAt)
	return u
}

// SetRecycledAt sets the "recycled_at" field.
func (u *ReceiveAddressUpsert) SetRecycledAt(v time.Time) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldRecycledAt, v)
	return u
}

// UpdateRecycledAt sets the "recycled_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateRecycledAt() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldRecycledAt)
	return u
}

// ClearRecycledAt clears the value of the "recycled_at" field.
func (u *ReceiveAddressUpsert) ClearRecycledAt() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldRecycledAt)
	return u
}

// SetTimesUsed sets the "times_used" field.
func (u *ReceiveAddressUpsert) SetTimesUsed(v int) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldTimesUsed, v)
	return u
}

// UpdateTimesUsed sets the "times_used" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateTimesUsed() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldTimesUsed)
	return u
}

// AddTimesUsed adds v to the "times_used" field.
func (u *ReceiveAddressUpsert) AddTimesUsed(v int) *ReceiveAddressUpsert {
	u.Add(receiveaddress.FieldTimesUsed, v)
	return u
}

// SetLastIndexedBlock sets the "last_indexed_block" field.
func (u *ReceiveAddressUpsert) SetLastIndexedBlock(v int64) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldLastIndexedBlock, v)
	return u
}

// UpdateLastIndexedBlock sets the "last_indexed_block" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateLastIndexedBlock() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldLastIndexedBlock)
	return u
}

// AddLastIndexedBlock adds v to the "last_indexed_block" field.
func (u *ReceiveAddressUpsert) AddLastIndexedBlock(v int64) *ReceiveAddressUpsert {
	u.Add(receiveaddress.FieldLastIndexedBlock, v)
	return u
}

// ClearLastIndexedBlock clears the value of the "last_indexed_block" field.
func (u *ReceiveAddressUpsert) ClearLastIndexedBlock() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldLastIndexedBlock)
	return u
}

// SetLastUsed sets the "last_used" field.
func (u *ReceiveAddressUpsert) SetLastUsed(v time.Time) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldLastUsed, v)
	return u
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateLastUsed() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldLastUsed)
	return u
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *ReceiveAddressUpsert) ClearLastUsed() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldLastUsed)
	return u
}

// SetTxHash sets the "tx_hash" field.
func (u *ReceiveAddressUpsert) SetTxHash(v string) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldTxHash, v)
	return u
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateTxHash() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldTxHash)
	return u
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *ReceiveAddressUpsert) ClearTxHash() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldTxHash)
	return u
}

// SetValidUntil sets the "valid_until" field.
func (u *ReceiveAddressUpsert) SetValidUntil(v time.Time) *ReceiveAddressUpsert {
	u.Set(receiveaddress.FieldValidUntil, v)
	return u
}

// UpdateValidUntil sets the "valid_until" field to the value that was provided on create.
func (u *ReceiveAddressUpsert) UpdateValidUntil() *ReceiveAddressUpsert {
	u.SetExcluded(receiveaddress.FieldValidUntil)
	return u
}

// ClearValidUntil clears the value of the "valid_until" field.
func (u *ReceiveAddressUpsert) ClearValidUntil() *ReceiveAddressUpsert {
	u.SetNull(receiveaddress.FieldValidUntil)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ReceiveAddress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReceiveAddressUpsertOne) UpdateNewValues() *ReceiveAddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(receiveaddress.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReceiveAddress.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReceiveAddressUpsertOne) Ignore() *ReceiveAddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReceiveAddressUpsertOne) DoNothing() *ReceiveAddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReceiveAddressCreate.OnConflict
// documentation for more info.
func (u *ReceiveAddressUpsertOne) Update(set func(*ReceiveAddressUpsert)) *ReceiveAddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReceiveAddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReceiveAddressUpsertOne) SetUpdatedAt(v time.Time) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateUpdatedAt() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAddress sets the "address" field.
func (u *ReceiveAddressUpsertOne) SetAddress(v string) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateAddress() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateAddress()
	})
}

// SetSalt sets the "salt" field.
func (u *ReceiveAddressUpsertOne) SetSalt(v []byte) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetSalt(v)
	})
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateSalt() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateSalt()
	})
}

// ClearSalt clears the value of the "salt" field.
func (u *ReceiveAddressUpsertOne) ClearSalt() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearSalt()
	})
}

// SetStatus sets the "status" field.
func (u *ReceiveAddressUpsertOne) SetStatus(v receiveaddress.Status) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateStatus() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateStatus()
	})
}

// SetIsDeployed sets the "is_deployed" field.
func (u *ReceiveAddressUpsertOne) SetIsDeployed(v bool) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetIsDeployed(v)
	})
}

// UpdateIsDeployed sets the "is_deployed" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateIsDeployed() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateIsDeployed()
	})
}

// SetDeploymentBlock sets the "deployment_block" field.
func (u *ReceiveAddressUpsertOne) SetDeploymentBlock(v int64) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetDeploymentBlock(v)
	})
}

// AddDeploymentBlock adds v to the "deployment_block" field.
func (u *ReceiveAddressUpsertOne) AddDeploymentBlock(v int64) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.AddDeploymentBlock(v)
	})
}

// UpdateDeploymentBlock sets the "deployment_block" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateDeploymentBlock() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateDeploymentBlock()
	})
}

// ClearDeploymentBlock clears the value of the "deployment_block" field.
func (u *ReceiveAddressUpsertOne) ClearDeploymentBlock() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearDeploymentBlock()
	})
}

// SetDeploymentTxHash sets the "deployment_tx_hash" field.
func (u *ReceiveAddressUpsertOne) SetDeploymentTxHash(v string) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetDeploymentTxHash(v)
	})
}

// UpdateDeploymentTxHash sets the "deployment_tx_hash" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateDeploymentTxHash() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateDeploymentTxHash()
	})
}

// ClearDeploymentTxHash clears the value of the "deployment_tx_hash" field.
func (u *ReceiveAddressUpsertOne) ClearDeploymentTxHash() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearDeploymentTxHash()
	})
}

// SetDeployedAt sets the "deployed_at" field.
func (u *ReceiveAddressUpsertOne) SetDeployedAt(v time.Time) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetDeployedAt(v)
	})
}

// UpdateDeployedAt sets the "deployed_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateDeployedAt() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateDeployedAt()
	})
}

// ClearDeployedAt clears the value of the "deployed_at" field.
func (u *ReceiveAddressUpsertOne) ClearDeployedAt() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearDeployedAt()
	})
}

// SetNetworkIdentifier sets the "network_identifier" field.
func (u *ReceiveAddressUpsertOne) SetNetworkIdentifier(v string) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetNetworkIdentifier(v)
	})
}

// UpdateNetworkIdentifier sets the "network_identifier" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateNetworkIdentifier() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateNetworkIdentifier()
	})
}

// ClearNetworkIdentifier clears the value of the "network_identifier" field.
func (u *ReceiveAddressUpsertOne) ClearNetworkIdentifier() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearNetworkIdentifier()
	})
}

// SetChainID sets the "chain_id" field.
func (u *ReceiveAddressUpsertOne) SetChainID(v int64) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetChainID(v)
	})
}

// AddChainID adds v to the "chain_id" field.
func (u *ReceiveAddressUpsertOne) AddChainID(v int64) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.AddChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateChainID() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateChainID()
	})
}

// ClearChainID clears the value of the "chain_id" field.
func (u *ReceiveAddressUpsertOne) ClearChainID() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearChainID()
	})
}

// SetAssignedAt sets the "assigned_at" field.
func (u *ReceiveAddressUpsertOne) SetAssignedAt(v time.Time) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetAssignedAt(v)
	})
}

// UpdateAssignedAt sets the "assigned_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateAssignedAt() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateAssignedAt()
	})
}

// ClearAssignedAt clears the value of the "assigned_at" field.
func (u *ReceiveAddressUpsertOne) ClearAssignedAt() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearAssignedAt()
	})
}

// SetRecycledAt sets the "recycled_at" field.
func (u *ReceiveAddressUpsertOne) SetRecycledAt(v time.Time) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetRecycledAt(v)
	})
}

// UpdateRecycledAt sets the "recycled_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateRecycledAt() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateRecycledAt()
	})
}

// ClearRecycledAt clears the value of the "recycled_at" field.
func (u *ReceiveAddressUpsertOne) ClearRecycledAt() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearRecycledAt()
	})
}

// SetTimesUsed sets the "times_used" field.
func (u *ReceiveAddressUpsertOne) SetTimesUsed(v int) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetTimesUsed(v)
	})
}

// AddTimesUsed adds v to the "times_used" field.
func (u *ReceiveAddressUpsertOne) AddTimesUsed(v int) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.AddTimesUsed(v)
	})
}

// UpdateTimesUsed sets the "times_used" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateTimesUsed() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateTimesUsed()
	})
}

// SetLastIndexedBlock sets the "last_indexed_block" field.
func (u *ReceiveAddressUpsertOne) SetLastIndexedBlock(v int64) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetLastIndexedBlock(v)
	})
}

// AddLastIndexedBlock adds v to the "last_indexed_block" field.
func (u *ReceiveAddressUpsertOne) AddLastIndexedBlock(v int64) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.AddLastIndexedBlock(v)
	})
}

// UpdateLastIndexedBlock sets the "last_indexed_block" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateLastIndexedBlock() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateLastIndexedBlock()
	})
}

// ClearLastIndexedBlock clears the value of the "last_indexed_block" field.
func (u *ReceiveAddressUpsertOne) ClearLastIndexedBlock() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearLastIndexedBlock()
	})
}

// SetLastUsed sets the "last_used" field.
func (u *ReceiveAddressUpsertOne) SetLastUsed(v time.Time) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetLastUsed(v)
	})
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateLastUsed() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateLastUsed()
	})
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *ReceiveAddressUpsertOne) ClearLastUsed() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearLastUsed()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *ReceiveAddressUpsertOne) SetTxHash(v string) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateTxHash() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateTxHash()
	})
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *ReceiveAddressUpsertOne) ClearTxHash() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearTxHash()
	})
}

// SetValidUntil sets the "valid_until" field.
func (u *ReceiveAddressUpsertOne) SetValidUntil(v time.Time) *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetValidUntil(v)
	})
}

// UpdateValidUntil sets the "valid_until" field to the value that was provided on create.
func (u *ReceiveAddressUpsertOne) UpdateValidUntil() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateValidUntil()
	})
}

// ClearValidUntil clears the value of the "valid_until" field.
func (u *ReceiveAddressUpsertOne) ClearValidUntil() *ReceiveAddressUpsertOne {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearValidUntil()
	})
}

// Exec executes the query.
func (u *ReceiveAddressUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReceiveAddressCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReceiveAddressUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReceiveAddressUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReceiveAddressUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReceiveAddressCreateBulk is the builder for creating many ReceiveAddress entities in bulk.
type ReceiveAddressCreateBulk struct {
	config
	err      error
	builders []*ReceiveAddressCreate
	conflict []sql.ConflictOption
}

// Save creates the ReceiveAddress entities in the database.
func (racb *ReceiveAddressCreateBulk) Save(ctx context.Context) ([]*ReceiveAddress, error) {
	if racb.err != nil {
		return nil, racb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(racb.builders))
	nodes := make([]*ReceiveAddress, len(racb.builders))
	mutators := make([]Mutator, len(racb.builders))
	for i := range racb.builders {
		func(i int, root context.Context) {
			builder := racb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReceiveAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, racb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = racb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, racb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, racb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (racb *ReceiveAddressCreateBulk) SaveX(ctx context.Context) []*ReceiveAddress {
	v, err := racb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (racb *ReceiveAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := racb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (racb *ReceiveAddressCreateBulk) ExecX(ctx context.Context) {
	if err := racb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReceiveAddress.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReceiveAddressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (racb *ReceiveAddressCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReceiveAddressUpsertBulk {
	racb.conflict = opts
	return &ReceiveAddressUpsertBulk{
		create: racb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReceiveAddress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (racb *ReceiveAddressCreateBulk) OnConflictColumns(columns ...string) *ReceiveAddressUpsertBulk {
	racb.conflict = append(racb.conflict, sql.ConflictColumns(columns...))
	return &ReceiveAddressUpsertBulk{
		create: racb,
	}
}

// ReceiveAddressUpsertBulk is the builder for "upsert"-ing
// a bulk of ReceiveAddress nodes.
type ReceiveAddressUpsertBulk struct {
	create *ReceiveAddressCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReceiveAddress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReceiveAddressUpsertBulk) UpdateNewValues() *ReceiveAddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(receiveaddress.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReceiveAddress.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReceiveAddressUpsertBulk) Ignore() *ReceiveAddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReceiveAddressUpsertBulk) DoNothing() *ReceiveAddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReceiveAddressCreateBulk.OnConflict
// documentation for more info.
func (u *ReceiveAddressUpsertBulk) Update(set func(*ReceiveAddressUpsert)) *ReceiveAddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReceiveAddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReceiveAddressUpsertBulk) SetUpdatedAt(v time.Time) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateUpdatedAt() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAddress sets the "address" field.
func (u *ReceiveAddressUpsertBulk) SetAddress(v string) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateAddress() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateAddress()
	})
}

// SetSalt sets the "salt" field.
func (u *ReceiveAddressUpsertBulk) SetSalt(v []byte) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetSalt(v)
	})
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateSalt() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateSalt()
	})
}

// ClearSalt clears the value of the "salt" field.
func (u *ReceiveAddressUpsertBulk) ClearSalt() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearSalt()
	})
}

// SetStatus sets the "status" field.
func (u *ReceiveAddressUpsertBulk) SetStatus(v receiveaddress.Status) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateStatus() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateStatus()
	})
}

// SetIsDeployed sets the "is_deployed" field.
func (u *ReceiveAddressUpsertBulk) SetIsDeployed(v bool) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetIsDeployed(v)
	})
}

// UpdateIsDeployed sets the "is_deployed" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateIsDeployed() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateIsDeployed()
	})
}

// SetDeploymentBlock sets the "deployment_block" field.
func (u *ReceiveAddressUpsertBulk) SetDeploymentBlock(v int64) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetDeploymentBlock(v)
	})
}

// AddDeploymentBlock adds v to the "deployment_block" field.
func (u *ReceiveAddressUpsertBulk) AddDeploymentBlock(v int64) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.AddDeploymentBlock(v)
	})
}

// UpdateDeploymentBlock sets the "deployment_block" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateDeploymentBlock() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateDeploymentBlock()
	})
}

// ClearDeploymentBlock clears the value of the "deployment_block" field.
func (u *ReceiveAddressUpsertBulk) ClearDeploymentBlock() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearDeploymentBlock()
	})
}

// SetDeploymentTxHash sets the "deployment_tx_hash" field.
func (u *ReceiveAddressUpsertBulk) SetDeploymentTxHash(v string) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetDeploymentTxHash(v)
	})
}

// UpdateDeploymentTxHash sets the "deployment_tx_hash" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateDeploymentTxHash() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateDeploymentTxHash()
	})
}

// ClearDeploymentTxHash clears the value of the "deployment_tx_hash" field.
func (u *ReceiveAddressUpsertBulk) ClearDeploymentTxHash() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearDeploymentTxHash()
	})
}

// SetDeployedAt sets the "deployed_at" field.
func (u *ReceiveAddressUpsertBulk) SetDeployedAt(v time.Time) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetDeployedAt(v)
	})
}

// UpdateDeployedAt sets the "deployed_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateDeployedAt() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateDeployedAt()
	})
}

// ClearDeployedAt clears the value of the "deployed_at" field.
func (u *ReceiveAddressUpsertBulk) ClearDeployedAt() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearDeployedAt()
	})
}

// SetNetworkIdentifier sets the "network_identifier" field.
func (u *ReceiveAddressUpsertBulk) SetNetworkIdentifier(v string) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetNetworkIdentifier(v)
	})
}

// UpdateNetworkIdentifier sets the "network_identifier" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateNetworkIdentifier() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateNetworkIdentifier()
	})
}

// ClearNetworkIdentifier clears the value of the "network_identifier" field.
func (u *ReceiveAddressUpsertBulk) ClearNetworkIdentifier() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearNetworkIdentifier()
	})
}

// SetChainID sets the "chain_id" field.
func (u *ReceiveAddressUpsertBulk) SetChainID(v int64) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetChainID(v)
	})
}

// AddChainID adds v to the "chain_id" field.
func (u *ReceiveAddressUpsertBulk) AddChainID(v int64) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.AddChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateChainID() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateChainID()
	})
}

// ClearChainID clears the value of the "chain_id" field.
func (u *ReceiveAddressUpsertBulk) ClearChainID() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearChainID()
	})
}

// SetAssignedAt sets the "assigned_at" field.
func (u *ReceiveAddressUpsertBulk) SetAssignedAt(v time.Time) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetAssignedAt(v)
	})
}

// UpdateAssignedAt sets the "assigned_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateAssignedAt() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateAssignedAt()
	})
}

// ClearAssignedAt clears the value of the "assigned_at" field.
func (u *ReceiveAddressUpsertBulk) ClearAssignedAt() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearAssignedAt()
	})
}

// SetRecycledAt sets the "recycled_at" field.
func (u *ReceiveAddressUpsertBulk) SetRecycledAt(v time.Time) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetRecycledAt(v)
	})
}

// UpdateRecycledAt sets the "recycled_at" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateRecycledAt() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateRecycledAt()
	})
}

// ClearRecycledAt clears the value of the "recycled_at" field.
func (u *ReceiveAddressUpsertBulk) ClearRecycledAt() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearRecycledAt()
	})
}

// SetTimesUsed sets the "times_used" field.
func (u *ReceiveAddressUpsertBulk) SetTimesUsed(v int) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetTimesUsed(v)
	})
}

// AddTimesUsed adds v to the "times_used" field.
func (u *ReceiveAddressUpsertBulk) AddTimesUsed(v int) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.AddTimesUsed(v)
	})
}

// UpdateTimesUsed sets the "times_used" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateTimesUsed() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateTimesUsed()
	})
}

// SetLastIndexedBlock sets the "last_indexed_block" field.
func (u *ReceiveAddressUpsertBulk) SetLastIndexedBlock(v int64) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetLastIndexedBlock(v)
	})
}

// AddLastIndexedBlock adds v to the "last_indexed_block" field.
func (u *ReceiveAddressUpsertBulk) AddLastIndexedBlock(v int64) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.AddLastIndexedBlock(v)
	})
}

// UpdateLastIndexedBlock sets the "last_indexed_block" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateLastIndexedBlock() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateLastIndexedBlock()
	})
}

// ClearLastIndexedBlock clears the value of the "last_indexed_block" field.
func (u *ReceiveAddressUpsertBulk) ClearLastIndexedBlock() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearLastIndexedBlock()
	})
}

// SetLastUsed sets the "last_used" field.
func (u *ReceiveAddressUpsertBulk) SetLastUsed(v time.Time) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetLastUsed(v)
	})
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateLastUsed() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateLastUsed()
	})
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *ReceiveAddressUpsertBulk) ClearLastUsed() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearLastUsed()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *ReceiveAddressUpsertBulk) SetTxHash(v string) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateTxHash() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateTxHash()
	})
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *ReceiveAddressUpsertBulk) ClearTxHash() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearTxHash()
	})
}

// SetValidUntil sets the "valid_until" field.
func (u *ReceiveAddressUpsertBulk) SetValidUntil(v time.Time) *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.SetValidUntil(v)
	})
}

// UpdateValidUntil sets the "valid_until" field to the value that was provided on create.
func (u *ReceiveAddressUpsertBulk) UpdateValidUntil() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.UpdateValidUntil()
	})
}

// ClearValidUntil clears the value of the "valid_until" field.
func (u *ReceiveAddressUpsertBulk) ClearValidUntil() *ReceiveAddressUpsertBulk {
	return u.Update(func(s *ReceiveAddressUpsert) {
		s.ClearValidUntil()
	})
}

// Exec executes the query.
func (u *ReceiveAddressUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReceiveAddressCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReceiveAddressCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReceiveAddressUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
